package ru.job4j.loop;

public class CheckPrimeNumber {
    public static boolean check(int number) {
        boolean prime = number > 1;
        for (int i = 2; i < number; i++) {
            if (number % i == 0) {
                prime = false;
                break;
            }
        }
        return prime;
    }

    /**
     * Проверяет, является ли число простым.
     * <p>
     * Простое число — это натуральное число больше 1, которое имеет ровно два делителя: 1 и само себя.
     * Для оптимизации метод проверяет возможные делители только до квадратного корня числа.
     * Если на этом диапазоне не найдено ни одного делителя, то число гарантированно простое.
     * </p>
     *
     * <p>Даже простые числа, которые больше квадратного корня, не проверяются отдельно —
     * если бы число делилось на такое «большое» простое, у него обязательно был бы «маленький» делитель меньше корня,
     * который уже проверен. Например, если бы число делилось на 11, то в паре с ним было бы число меньше √n,
     * и этот делитель мы бы нашли раньше.</p>
     *
     * <p>Примеры:
     * <ul>
     *   <li>36: √36 = 6. Делитель 2 найден (36 % 2 == 0) — значит число составное, дальнейшие проверки не нужны.</li>
     *   <li>37: √37 ≈ 6.08. Проверка делителей 2, 3, 4, 5, 6 не дала результата — значит число простое,
     *       делители больше 6 проверять не нужно, так как они всегда образуют пары с уже проверенными.</li>
     * </ul>
     * </p>
     *
     * @param number число для проверки
     * @return {@code true}, если число простое; {@code false} в остальных случаях
     */

    public static boolean advancedCheck(int number) {
        boolean prime = number > 1;
        for (int i = 2; i * i < number; i++) {
            if (number % i == 0) {
                prime = false;
                break;
            }
        }
        return prime;
    }
}